name: 🚀 Release to PyPI

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for setuptools-scm

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: 🔍 Run linting
        run: |
          ruff check src/ tests/
          black --check src/ tests/

      - name: 🔬 Run type checking
        run: |
          mypy src/

      - name: 🧪 Run tests
        run: |
          pytest --cov=letta_mcp --cov-report=xml

  build:
    name: 🔨 Build distribution
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for setuptools-scm

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 📦 Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: 🔨 Build package
        run: python -m build

      - name: 🔍 Check package
        run: twine check dist/*

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish-testpypi:
    name: 🧪 Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' || contains(github.ref, 'rc') || contains(github.ref, 'alpha') || contains(github.ref, 'beta')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/letta-mcp-server
    permissions:
      id-token: write  # Mandatory for Trusted Publishing

    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: 🚀 Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  publish-pypi:
    name: 🎉 Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'rc') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta')
    environment:
      name: pypi
      url: https://pypi.org/p/letta-mcp-server
    permissions:
      id-token: write  # Mandatory for Trusted Publishing

    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: 🎉 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  create-release:
    name: 📝 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-pypi]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📊 Generate release notes
        id: release_notes
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" HEAD)
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          ## 🚀 What's New in $VERSION
          
          ### 🔥 Highlights
          - The FIRST production-ready MCP server bridging Claude and Letta.ai agents
          - 30+ MCP tools for comprehensive agent management
          - Production-ready with streaming, error handling, and connection pooling
          
          ### 📦 Installation
          \`\`\`bash
          pip install letta-mcp-server==$VERSION
          \`\`\`
          
          ### 🔧 Quick Setup
          \`\`\`bash
          # Add to Claude Desktop/Code MCP configuration
          claude mcp add letta-mcp-server
          \`\`\`
          
          ### 📋 Changes in this Release
          $COMMITS
          
          ### 🔗 Resources
          - 📚 [Documentation](https://github.com/SNYCFIRE-CORE/letta-mcp-server/blob/main/README.md)
          - 🐛 [Report Issues](https://github.com/SNYCFIRE-CORE/letta-mcp-server/issues/new/choose)
          - 📦 [PyPI Package](https://pypi.org/project/letta-mcp-server/$VERSION/)
          - 💬 [Discussions](https://github.com/SNYCFIRE-CORE/letta-mcp-server/discussions)
          
          ### 🙏 Contributing
          We welcome contributions! See [CONTRIBUTING.md](https://github.com/SNYCFIRE-CORE/letta-mcp-server/blob/main/CONTRIBUTING.md) for details.
          
          ---
          
          **Full Changelog**: https://github.com/SNYCFIRE-CORE/letta-mcp-server/compare/${LAST_TAG}...$VERSION
          EOF

      - name: 📝 Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*
            RELEASE_NOTES_*.md
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
          generate_release_notes: true

  post-release:
    name: 📢 Post-Release Actions
    runs-on: ubuntu-latest
    needs: [create-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📢 Create announcement issue
        uses: actions/github-script@v7
        with:
          script: |
            const version = context.ref.replace('refs/tags/', '');
            const issueBody = `## 🎉 Release ${version} is now available!
            
            We're excited to announce the release of Letta MCP Server ${version}!
            
            ### 📦 Installation
            \`\`\`bash
            pip install letta-mcp-server==${version}
            \`\`\`
            
            ### 🔗 Links
            - 📝 [Release Notes](https://github.com/SNYCFIRE-CORE/letta-mcp-server/releases/tag/${version})
            - 📦 [PyPI Package](https://pypi.org/project/letta-mcp-server/${version}/)
            
            ### 🐛 Found an issue?
            Please report it using our [issue templates](https://github.com/SNYCFIRE-CORE/letta-mcp-server/issues/new/choose).
            
            ### 💬 Questions?
            Join the discussion in our [GitHub Discussions](https://github.com/SNYCFIRE-CORE/letta-mcp-server/discussions).
            
            Happy coding! 🚀`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📢 Release ${version} Announcement`,
              body: issueBody,
              labels: ['announcement', 'release']
            });

      - name: 📊 Update project metrics
        run: |
          echo "## 📊 Release Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- 🏷️ **Version**: ${GITHUB_REF#refs/tags/}" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **PyPI**: [letta-mcp-server](https://pypi.org/project/letta-mcp-server/)" >> $GITHUB_STEP_SUMMARY
          echo "- 📅 **Released**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Status**: Successfully published to PyPI and GitHub Releases" >> $GITHUB_STEP_SUMMARY
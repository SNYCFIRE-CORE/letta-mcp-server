name: 🔄 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: 🧪 Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for setuptools-scm

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 💾 Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: 🔍 Run linting
        run: |
          ruff check src/ tests/ --output-format=github
          black --check src/ tests/

      - name: 🔬 Run type checking
        run: |
          mypy src/ --show-error-codes

      - name: 🧪 Run tests with coverage
        run: |
          pytest --cov=letta_mcp --cov-report=xml --cov-report=term-missing -v

      - name: 📊 Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build:
    name: 🔨 Build and validate package
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for setuptools-scm

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 📦 Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine check-manifest

      - name: 🔍 Check manifest
        run: check-manifest

      - name: 🔨 Build package
        run: python -m build

      - name: 🔍 Check package
        run: |
          twine check dist/*
          python -m pip install dist/*.whl
          python -c "import letta_mcp; print(f'Version: {letta_mcp.__version__}')"

  security:
    name: 🔒 Security scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit[toml]

      - name: 🔒 Run safety check
        run: safety check --json

      - name: 🛡️ Run bandit security scan
        run: bandit -r src/ -f json -o bandit-report.json

      - name: 📤 Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
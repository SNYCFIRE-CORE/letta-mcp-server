name: 📚 Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'src/**/*.py'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'src/**/*.py'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  check-docs:
    name: 🔍 Check Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 📦 Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]" || pip install mkdocs mkdocs-material mkdocstrings

      - name: 🔍 Check documentation links
        run: |
          # Check for broken internal links in README
          python -c "
          import re
          with open('README.md', 'r') as f:
              content = f.read()
              
          # Find all markdown links
          links = re.findall(r'\[.*?\]\((.*?)\)', content)
          broken_links = []
          
          for link in links:
              if link.startswith('http'):
                  continue  # Skip external links for now
              if link.startswith('#'):
                  continue  # Skip anchor links for now
              if not link.startswith('/') and not os.path.exists(link):
                  broken_links.append(link)
          
          if broken_links:
              print('Broken internal links found:')
              for link in broken_links:
                  print(f'  - {link}')
              exit(1)
          else:
              print('All internal links are valid!')
          "

      - name: 📝 Check code examples in docs
        run: |
          # Check that Python code examples in README are syntactically valid
          python -c "
          import re
          import ast
          
          with open('README.md', 'r') as f:
              content = f.read()
          
          # Extract Python code blocks
          python_blocks = re.findall(r'```python\n(.*?)\n```', content, re.DOTALL)
          
          for i, block in enumerate(python_blocks):
              try:
                  ast.parse(block)
                  print(f'Code block {i+1}: ✅ Valid')
              except SyntaxError as e:
                  print(f'Code block {i+1}: ❌ Syntax Error - {e}')
                  print(f'Block content:\n{block}\n')
                  exit(1)
          
          print(f'All {len(python_blocks)} Python code blocks are syntactically valid!')
          "

  generate-api-docs:
    name: 📖 Generate API Documentation
    runs-on: ubuntu-latest
    needs: check-docs
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pdoc3 sphinx sphinx-rtd-theme

      - name: 📖 Generate API documentation with pdoc
        run: |
          pdoc --html --output-dir docs/api src/letta_mcp/
          # Move generated docs to expected location
          mv docs/api/letta_mcp/* docs/api/ || true
          rmdir docs/api/letta_mcp || true

      - name: 📊 Generate tool reference
        run: |
          python -c "
          import json
          import os
          from letta_mcp.server import LettaMCPServer
          
          # Generate tool documentation
          server = LettaMCPServer()
          tools_doc = '# 🛠️ MCP Tools Reference\n\n'
          tools_doc += 'This document lists all available MCP tools in the Letta MCP Server.\n\n'
          
          # Add tools documentation here
          tools_doc += '## Available Tools\n\n'
          tools_doc += '| Tool Name | Description | Parameters |\n'
          tools_doc += '|-----------|-------------|------------|\n'
          
          # This would need to be implemented based on actual server structure
          tools_doc += '| letta_create_agent | Create a new Letta agent | name, persona, tools |\n'
          tools_doc += '| letta_list_agents | List all Letta agents | filter (optional) |\n'
          tools_doc += '| letta_send_message | Send message to agent | agent_id, message |\n'
          
          with open('docs/TOOLS.md', 'w') as f:
              f.write(tools_doc)
          
          print('✅ Generated tools reference documentation')
          "

      - name: 📤 Upload API docs
        uses: actions/upload-artifact@v4
        with:
          name: api-docs
          path: docs/

  build-docs:
    name: 🔨 Build Documentation Site
    runs-on: ubuntu-latest
    needs: [check-docs, generate-api-docs]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download API docs
        uses: actions/download-artifact@v4
        with:
          name: api-docs
          path: docs/

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 📦 Install MkDocs
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocstrings[python] mkdocs-gen-files

      - name: 📄 Create mkdocs.yml if not exists
        run: |
          if [ ! -f mkdocs.yml ]; then
            cat > mkdocs.yml << EOF
          site_name: Letta MCP Server Documentation
          site_description: The first production-ready MCP server bridging Claude and Letta.ai agents
          site_url: https://snycfire-core.github.io/letta-mcp-server/
          repo_url: https://github.com/SNYCFIRE-CORE/letta-mcp-server
          repo_name: SNYCFIRE-CORE/letta-mcp-server
          
          theme:
            name: material
            palette:
              - scheme: default
                primary: blue
                accent: blue
                toggle:
                  icon: material/brightness-7
                  name: Switch to dark mode
              - scheme: slate
                primary: blue
                accent: blue
                toggle:
                  icon: material/brightness-4
                  name: Switch to light mode
            features:
              - navigation.tabs
              - navigation.sections
              - navigation.expand
              - navigation.top
              - search.highlight
              - search.share
              - content.code.copy
          
          nav:
            - Home: index.md
            - Getting Started: getting-started.md
            - API Reference: api/
            - Tools Reference: TOOLS.md
            - Contributing: CONTRIBUTING.md
            - License: LICENSE.md
          
          plugins:
            - search
            - mkdocstrings:
                handlers:
                  python:
                    options:
                      docstring_style: google
          
          markdown_extensions:
            - admonition
            - codehilite
            - pymdownx.details
            - pymdownx.superfences
            - pymdownx.tabbed:
                alternate_style: true
            - toc:
                permalink: true
          EOF
          fi

      - name: 📄 Create docs index if not exists
        run: |
          if [ ! -f docs/index.md ]; then
            cp README.md docs/index.md
          fi

      - name: 📄 Create getting started guide
        run: |
          if [ ! -f docs/getting-started.md ]; then
            cat > docs/getting-started.md << EOF
          # 🚀 Getting Started
          
          Welcome to the Letta MCP Server! This guide will help you get up and running quickly.
          
          ## Installation
          
          \`\`\`bash
          pip install letta-mcp-server
          \`\`\`
          
          ## Quick Setup
          
          1. **Install the package**:
             \`\`\`bash
             pip install letta-mcp-server
             \`\`\`
          
          2. **Configure your Letta API key**:
             \`\`\`bash
             export LETTA_API_KEY="your-letta-api-key"
             \`\`\`
          
          3. **Add to Claude MCP configuration**:
             \`\`\`bash
             claude mcp add letta-mcp-server
             \`\`\`
          
          ## Next Steps
          
          - Check out the [Tools Reference](TOOLS.md) for available functionality
          - Read the [API Reference](api/) for detailed documentation
          - See [examples](https://github.com/SNYCFIRE-CORE/letta-mcp-server/tree/main/examples) for usage patterns
          
          ## Need Help?
          
          - 📚 [Documentation](https://snycfire-core.github.io/letta-mcp-server/)
          - 🐛 [Report Issues](https://github.com/SNYCFIRE-CORE/letta-mcp-server/issues)
          - 💬 [Discussions](https://github.com/SNYCFIRE-CORE/letta-mcp-server/discussions)
          EOF
          fi

      - name: 🔨 Build documentation
        run: mkdocs build

      - name: 📤 Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

  deploy-docs:
    name: 🚀 Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  doc-links-check:
    name: 🔗 External Links Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔗 Check external links
        uses: lycheeverse/lychee-action@v2
        with:
          args: --verbose --no-progress --exclude-private --exclude-mail README.md docs/
          fail: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Create link check report
        if: always()
        run: |
          echo "## 🔗 Link Check Report" >> $GITHUB_STEP_SUMMARY
          echo "- 📅 **Check Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 **Files Checked**: README.md, docs/" >> $GITHUB_STEP_SUMMARY
          if [ $? -eq 0 ]; then
            echo "- ✅ **Status**: All links are working" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Status**: Some links are broken (see logs above)" >> $GITHUB_STEP_SUMMARY
          fi
name: CI - Develop Branch

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    name: "Code Quality & Security"
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Code formatting check
      run: |
        black --check --diff src/ tests/
        
    - name: Linting
      run: |
        ruff check src/ tests/
        
    - name: Type checking
      run: |
        mypy src/letta_mcp/
        
    - name: Security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  test-suite:
    runs-on: ubuntu-latest
    name: "Test Suite"
    needs: quality-checks
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src/letta_mcp --cov-report=xml --cov-report=term
        
    - name: Run integration tests (mocked)
      run: |
        pytest tests/integration/ -v -k "not real_api"
        
    - name: Upload coverage
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-validation:
    runs-on: ubuntu-latest
    name: "Build & Package Validation"
    needs: test-suite
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Validate package
      run: |
        twine check dist/*
        
    - name: Test installation
      run: |
        pip install dist/*.whl
        letta-mcp --help
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/

  docs-validation:
    runs-on: ubuntu-latest
    name: "Documentation Validation"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,docs]"
        
    - name: Validate README links
      run: |
        python scripts/validate_links.py README.md
        
    - name: Check code examples
      run: |
        python scripts/validate_examples.py
        
    - name: Build documentation
      run: |
        mkdocs build --strict

  notify-success:
    runs-on: ubuntu-latest
    name: "CI Success Notification"
    needs: [quality-checks, test-suite, build-validation, docs-validation]
    if: success()
    
    steps:
    - name: Success notification
      run: |
        echo "âœ… All CI checks passed for develop branch"
        echo "ðŸ“¦ Package validated and ready for testing"
        echo "ðŸ§ª Test coverage maintained"
        echo "ðŸ”’ Security scans completed"